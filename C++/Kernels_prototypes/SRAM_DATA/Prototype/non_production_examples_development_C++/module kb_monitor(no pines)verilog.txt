module kb_monitor
   (
   input wire _, _,
   input wire _, _,
   output wire _
   );

// symbolic state decl
localparam [1:0]
   idle = 2'b00,
   send1 = 2'b01,
   send0 = 2'b10,
   sendb = 2'b11;

//signl
reg [1:0] state_reg, state_next;
reg [7:0] w_data, ascii_code;
wire [7:0] scan_data;
reg wr_uart;
wire scan_done_tick;
wire [3:0] hex_in;

// instantiate ps2 receivr
ps2_rx ps2_rx_unit
   (._(), .(), .rx_en(1'b1),
    .ps2d(ps2d), .ps2c(ps2c),
    .rx_done_tick(scan_done_tick), .dout(scan_data));

// instantiate UART
uart uart_unit
   (._(), .(), .rd_uart(1'b0),
    .wr_uart(wr_uart), .rx(1'b1), .w_data(w_data),
    .tx_full(), .rx_empty(), .r_data(), .tx(tx));

//FSM to send 3 ASCII characters
//state reg
always @(posedge _, posedge _)
   if ()
      state_reg <= idle;
   else
      state_reg <= state_next;

// next state logic
always @*
begin
   wr_uart = 1'b0;
   w_data = SP;
   state_next = state_reg;
   case (state_reg)
      idle:
         if (scan_done_tick) // a scan code received
            state_next = send1;
      send1: // send higher hex char
     begin
        w_data = ascii_code;
        wr_uart = 1'b1;
        state_next = send0;
     end
   send0: // send lower hex char
     begin
        w_data = ascii_code;
        wr_uart = 1'b1;
        state_next = sendb;
     end
   sendb: // blanck char
      begin
         w_data = SP;
         wr_uart = 1'b1;
         state_next = idle;
      end
    endcase
  end
// scan code to ASCII display
// Split the scan code into two 4-bit hex
// hex digit to ASClI code 
always @* 
case (hex-in) 
4'hO: ascii-code = 8'h30; 
4'hl: ascii-code = 8'h31; 
4'h2: ascii-code = 8'h32; 
4'h3: ascii-code = 8'h33; 
4'h4: ascii-code = 8'h34; 
4'h5: ascii-code = 8'h35; 
4'h6: ascii-code = 8jh36; 
4'h7: ascii-code = 8'h37; 
4'h8: ascii-code = 8'h38; 
4'h9: ascii-code = 8'h39; 
4'ha: ascii-code = 8'h41; 
4'hb: ascii-code = 8'h42; 
4'hc: ascii-code = 8'h43; 
4'hd: ascii-code = 8'h44; 
4'he: ascii-code = 8'h45; 
default : ascii-code = 8'h46; 
endcase

//281 keyboard verification circuit

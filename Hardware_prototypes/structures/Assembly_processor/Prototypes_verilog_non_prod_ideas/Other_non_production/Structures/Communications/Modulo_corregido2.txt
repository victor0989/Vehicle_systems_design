`timescale 1 ns / 1 ps

module myip_v1_0_S00_AXI #(
    parameter integer C_S_AXI_DATA_WIDTH = 32,
    parameter integer C_S_AXI_ADDR_WIDTH = 4
)(
    // Señales de usuario
    input  wire SignalEnable,
    output wire SignalOut,
    input  wire [2:0] PatternIn,
    output reg [9:0] PatternCountTotal,
    output reg PatternCountDone,
    output reg PatternCountDone_interrupt,
    
    // Interfaz AXI4-Lite
    input wire S_AXI_ACLK,
    input wire S_AXI_ARESETN,
    input wire [C_S_AXI_ADDR_WIDTH-1 : 0] S_AXI_AWADDR,
    input wire [2 : 0] S_AXI_AWPROT,
    input wire S_AXI_AWVALID,
    output reg S_AXI_AWREADY,
    input wire [C_S_AXI_DATA_WIDTH-1 : 0] S_AXI_WDATA,
    input wire [(C_S_AXI_DATA_WIDTH/8)-1 : 0] S_AXI_WSTRB,
    input wire S_AXI_WVALID,
    output reg S_AXI_WREADY,
    output reg [1 : 0] S_AXI_BRESP,
    output reg S_AXI_BVALID,
    input wire S_AXI_BREADY,
    input wire [C_S_AXI_ADDR_WIDTH-1 : 0] S_AXI_ARADDR,
    input wire [2 : 0] S_AXI_ARPROT,
    input wire S_AXI_ARVALID,
    output reg S_AXI_ARREADY,
    output reg [C_S_AXI_DATA_WIDTH-1 : 0] S_AXI_RDATA,
    output reg [1 : 0] S_AXI_RRESP,
    output reg S_AXI_RVALID,
    input wire S_AXI_RREADY
);

    // Registros internos
    reg [C_S_AXI_DATA_WIDTH-1 : 0] reg_data;
    reg [9:0] internal_count;
    reg interrupt_signal;

    // Escritura de direcciones y datos
    always @(posedge S_AXI_ACLK) begin
        if (!S_AXI_ARESETN) begin
            S_AXI_AWREADY <= 1'b0;
            S_AXI_WREADY <= 1'b0;
            S_AXI_BVALID <= 1'b0;
            S_AXI_BRESP <= 2'b00;
            reg_data <= 0;
        end else begin
            if (!S_AXI_AWREADY && S_AXI_AWVALID) begin
                S_AXI_AWREADY <= 1'b1;
            end else begin
                S_AXI_AWREADY <= 1'b0;
            end
            
            if (!S_AXI_WREADY && S_AXI_WVALID) begin
                S_AXI_WREADY <= 1'b1;
                reg_data <= S_AXI_WDATA;
            end else begin
                S_AXI_WREADY <= 1'b0;
            end
            
            if (S_AXI_AWREADY && S_AXI_AWVALID && S_AXI_WREADY && S_AXI_WVALID) begin
                S_AXI_BVALID <= 1'b1;
                S_AXI_BRESP <= 2'b00; // Respuesta OKAY
            end else if (S_AXI_BVALID && S_AXI_BREADY) begin
                S_AXI_BVALID <= 1'b0;
            end
        end
    end

    // Lectura de direcciones y datos
    always @(posedge S_AXI_ACLK) begin
        if (!S_AXI_ARESETN) begin
            S_AXI_ARREADY <= 1'b0;
            S_AXI_RVALID <= 1'b0;
            S_AXI_RRESP <= 2'b00;
            S_AXI_RDATA <= 0;
        end else begin
            if (!S_AXI_ARREADY && S_AXI_ARVALID) begin
                S_AXI_ARREADY <= 1'b1;
            end else begin
                S_AXI_ARREADY <= 1'b0;
            end

            if (S_AXI_ARREADY && S_AXI_ARVALID) begin
                S_AXI_RDATA <= reg_data;
                S_AXI_RRESP <= 2'b00; // Respuesta OKAY
                S_AXI_RVALID <= 1'b1;
            end else if (S_AXI_RVALID && S_AXI_RREADY) begin
                S_AXI_RVALID <= 1'b0;
            end
        end
    end

    // Lógica de usuario
    always @(posedge S_AXI_ACLK) begin
        if (!S_AXI_ARESETN) begin
            internal_count <= 0;
            interrupt_signal <= 0;
        end else if (SignalEnable) begin
            if (PatternIn == 3'b101) begin
                internal_count <= internal_count + 1;
            end

            if (internal_count >= 1023) begin
                interrupt_signal <= 1;
            end else begin
                interrupt_signal <= 0;
            end
        end
    end

    assign PatternCountTotal = internal_count;
    assign PatternCountDone = (internal_count >= 1023) ? 1'b1 : 1'b0;
    assign PatternCountDone_interrupt = interrupt_signal;
    assign SignalOut = SignalEnable;

endmodule
